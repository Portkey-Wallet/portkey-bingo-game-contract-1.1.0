syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "acs12.proto";

option csharp_namespace = "Portkey.Contracts.BingoGameContract";

service BingoGameContract {
    option (aelf.csharp_state) = "Portkey.Contracts.BingoGameContract.BingoGameContractState";
    option (aelf.base) = "acs12.proto";

    // Actions
    rpc Register (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }
    rpc Play (PlayInput) returns (google.protobuf.Int64Value) {
    }
    rpc Bingo (aelf.Hash) returns (google.protobuf.BoolValue) {
    }
    rpc Quit (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }
    rpc SetLimitSettings (LimitSettings) returns (google.protobuf.Empty) {
    }
    rpc Initialize (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }

    // Views
    rpc GetAward (aelf.Hash) returns (google.protobuf.Int64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetPlayerInformation (aelf.Address) returns (PlayerInformation) {
        option (aelf.is_view) = true;
    }
    rpc GetLimitSettings (google.protobuf.Empty) returns (LimitSettings) {
        option (aelf.is_view) = true;
    }
    rpc GetRandomNumber (aelf.Hash) returns (google.protobuf.Int32Value) {
        option (aelf.is_view) = true;
    }
    rpc GetBoutInformation (GetBoutInformationInput) returns (BoutInformation) {
        option (aelf.is_view) = true;
    }
    rpc GetRandomHash (GetRandomHashInput) returns (GetRandomHashOutput) {
        option (aelf.is_view) = true;
    }
}

message GetRandomHashInput {
    aelf.Hash seed = 1;
    int64 times = 2;
}

message GetRandomHashOutput {
    repeated RandomResult random_results = 1;
}

message RandomResult {
    aelf.Hash random_hash = 1;
    int64 height = 2;
}

enum BingoType {
    Small = 0;
    Large = 1;
}

message PlayInput {
    int64 amount = 1;
    BingoType type = 2;
}

message GetBoutInformationInput {
    aelf.Hash play_id = 1;
    aelf.Address address = 2;
}

message PlayerInformation {
    aelf.Hash seed = 1;
    repeated BoutInformation bouts = 2;
    google.protobuf.Timestamp register_time = 3;
}

message DiceList{
    repeated int32 dices = 1;
}

message BoutInformation {
    int64 play_block_height = 1;
    int64 amount = 2;
    int64 award = 3;
    bool is_complete = 4;
    aelf.Hash play_id = 5;
    int64 bingo_block_height = 6;
    BingoType type = 7;
    int32 random_number = 8;
    int64 round_number = 9;
    google.protobuf.Timestamp play_time = 10;
    DiceList dices = 11;
}

message LimitSettings {
    int64 min_amount = 1;
    int64 max_amount = 2;
}

// LogEvent
message Played {
    option (aelf.is_event) = true;
    int64 play_block_height = 1 [(aelf.is_indexed) = true];
    int64 amount = 2 [(aelf.is_indexed) = true];
    BingoType type = 3 [(aelf.is_indexed) = true];
    aelf.Hash play_id = 4 [(aelf.is_indexed) = true];
    aelf.Address player_address = 5 [(aelf.is_indexed) = true];
    string symbol = 6 [(aelf.is_indexed) = true];
}

message Bingoed {
    option (aelf.is_event) = true;
    int64 play_block_height = 1 [(aelf.is_indexed) = true];
    int64 amount = 2 [(aelf.is_indexed) = true];
    int64 award = 3 [(aelf.is_indexed) = true];
    bool is_complete = 4 [(aelf.is_indexed) = true];
    aelf.Hash play_id = 5 [(aelf.is_indexed) = true];
    int64 bingo_block_height = 6 [(aelf.is_indexed) = true];
    BingoType type = 7 [(aelf.is_indexed) = true];
    int32 random_number = 8 [(aelf.is_indexed) = true];
    DiceList dices = 9 [(aelf.is_indexed) = true];
    aelf.Address player_address = 10 [(aelf.is_indexed) = true];
}

message Registered {
    option (aelf.is_event) = true;
    aelf.Hash seed = 1 [(aelf.is_indexed) = true];
    google.protobuf.Timestamp register_time =2 [(aelf.is_indexed) = true];
    aelf.Address player_address = 3 [(aelf.is_indexed) = true];
}